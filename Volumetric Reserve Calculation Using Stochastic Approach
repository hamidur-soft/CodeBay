# Gas Resource and Reserve Calculation Using Monte Carlo Simulation by Hamidur Rahman, Bapex following AAPG Guidelines

from scipy.stats import *
from scipy.stats import skew
from scipy.stats import kurtosis
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns
from statsmodels.distributions.empirical_distribution import ECDF

# Code for inputting Reservoir properties and generating triangular distribution
# np.random.triangular(left, mode, right, size=None)

n = 1000000                                                    # Total number of iterations

Area = np.random.triangular(338, 538.69, 738, n)                # Area in acres
Thickness = np.random.triangular(185, 215.55, 260, n)           # Net Pay Thickness in feet
POR = np.random.triangular(0.23, 0.26, 0.29, n)                 # Porosity in fraction
GS = np.random.triangular(0.45, 0.55, 0.60, n)                  # Gas saturation in fraction
BG = np.random.triangular(0.00480, 0.00485, 0.00490, n)         # Gas formation volume factor rcf/scf

Feather = 1
Results = Area*Thickness*POR*GS/BG*43560*Feather/1000000000     # Gas reserve in BCF


                                # 1. Reservoir Area

# 1. for calculating statistical parameters of Triangular distribution of the reservoir area
print('\n')
print('Calculated statistical parameters of Triangular distribution of the reservoir area')
Area_Plot = Area
print('Number of Total Trials=', n)
mean_ar = np.mean(Area_Plot)
print('AreaPlot_Mean=', mean_ar)
print('AreaPlot_Median=', np.median(Area_Plot))
std_ar = np.std(Area_Plot)
print('AreaPlot_Standard_Deviation=', std_ar)
min_ar = np.min(Area_Plot)
print('AreaPlot_Minimum=', min_ar)
max_ar = np.max(Area_Plot)
print('AreaPlot_Maximum=', max_ar)
print('AreaPlot_Variance=', np.var(Area_Plot))
print('AreaPlot_Skewness=', skew(Area_Plot, bias=True))
print('AreaPlot_Kurtosis=', kurtosis(Area_Plot, bias=True))
Mean_Standard_Error_ar = (std_ar/n**(1/2))
print("Mean_Standard_Error=", Mean_Standard_Error_ar)
print('\n')

# for creating norm fitting line and visualization histogram and norm fit curve
#domain_ar = np.linspace(min_ar, max_ar)
#plt.plot(domain_ar, norm.pdf(domain_ar, mean_ar, std_ar))

plt.hist(Area_Plot, bins=100, density=True, linewidth=1, edgecolor="blue", facecolor='r', alpha=1,
         label=f'$(\mu={round(mean_ar,3)},\sigma={round(std_ar,3)})$')
plt.xlabel('Area in acres', fontsize=12, color='red')
plt.ylabel('Probability', fontsize=12, color='red')
plt.title(f"Triangular distribution for area\n ({n} Trials)")
plt.axis([300, 800, 0, 0.006])
plt.grid(True)
plt.legend()
plt.show()

# for probabilities calculation
cp10_ar = norm.ppf(0.10, loc=mean_ar, scale=std_ar)
cp50_ar = norm.ppf(0.50, loc=mean_ar, scale=std_ar)
cp90_ar = norm.ppf(0.90, loc=mean_ar, scale=std_ar)
print('Probabilities for Reservoir Area in acres')
prob_ar = f'10% percentile = {round(cp10_ar, 2)} ' \
          f'\n50% percentile(most likely value) = {round(cp50_ar, 2)} ' \
            f'\n90% percentile) = {round(cp90_ar, 2)}'
print(prob_ar)

# for empirical cumulative density function for Reservoir Area
ecdf_ar = ECDF(Area_Plot)
plt.step(ecdf_ar.x, ecdf_ar.y, label='Empirical CDF')
plt.title(f'Cumulative Probability of Reservoir Area\n ({n} Trials)')
plt.xlabel('Area in acres', fontsize=12, color='red')
plt.ylabel('Cumulative Probability', fontsize=12, color='red')
plt.axhline(y=0.10, c='red', ls=':', lw=0.7)
plt.axhline(y=0.50, c='red', ls=':', lw=0.7)
plt.axhline(y=0.90, c='red', ls=':', lw=0.7)
plt.axvline(x=cp10_ar, c='red', ls=':', lw=0.7)
plt.axvline(x=cp50_ar, c='red', ls=':', lw=0.7)
plt.axvline(x=cp90_ar, c='red', ls=':', lw=0.7)
plt.annotate(f'---> 10%= {round(cp10_ar,2)}', xy=(cp10_ar, 0.10), xytext=(cp10_ar, 0.10))
plt.annotate(f'---> 50%= {round(cp50_ar,2)}', xy=(cp50_ar, 0.50), xytext=(cp50_ar, 0.50))
plt.annotate(f'---> 90%= {round(cp90_ar,2)}', xy=(cp90_ar, 0.90), xytext=(cp90_ar, 0.90))
plt.legend()
plt.show()


                                #2. Reservoir Thickness

# 2. for calculating statistical parameters of normal distribution of the reservoir thickness
print('\n')
print('Calculated statistical parameters of normal distribution of the reservoir thickness')
thick_plot = Thickness
print('Number of Total Trials=', n)
mean_thick = np.mean(thick_plot)
print('Thick_plot_Mean=', mean_thick)
print('Thick_plot_Median=', np.median(thick_plot))
std_thick = np.std(thick_plot)
print('Thick_plot_Standard_Deviation=', std_thick)
min_thick = np.min(thick_plot)
print('Thick_plot_Minimum=', min_thick)
max_thick = np.max(thick_plot)
print('Thick_plot_Maximum=', max_thick)
print('Thick_plot_Variance=', np.var(thick_plot))
print('Thick_plot_Skewness=', skew(thick_plot, bias=True))
print('Thick_plot_Kurtosis=', kurtosis(thick_plot, bias=True))
Mean_Standard_Error_thick = (std_thick/n**(1/2))
print("Thick_Mean_Standard_Error=", Mean_Standard_Error_thick)
print('\n')

# for creating norm fitting line and visualization histogram and norm fit curve
#domain_thick = np.linspace(min_thick, max_thick)
#plt.plot(domain_thick, norm.pdf(domain_thick, mean_thick, std_thick))

plt.hist(thick_plot, bins=100, density=True, linewidth=1, edgecolor="blue", facecolor='r', alpha=1,
         label=f'$(\mu={round(mean_thick,3)},\sigma={round(std_thick,3)})$')
plt.xlabel('Reservoir thickness in ft', fontsize=12, color='red')
plt.ylabel('Probability', fontsize=12, color='red')
plt.title(f"Triangular distribution for reservoir thickness\n ({n} Trials")
plt.axis([175, 275, 0, 0.030])
plt.grid(True)
plt.legend()
plt.show()

# for probabilities calculation
cp10_thick = norm.ppf(0.10, loc=mean_thick, scale=std_thick)
cp50_thick = norm.ppf(0.50, loc=mean_thick, scale=std_thick)
cp90_thick = norm.ppf(0.90, loc=mean_thick, scale=std_thick)
print('Probabilities for Reservoir Thickness in feet')
prob_thick = f'10% percentile = {round(cp10_thick, 2)} ' \
          f'\n50% percentile(most likely value) = {round(cp50_thick, 2)} ' \
            f'\n90% percentile) = {round(cp90_thick, 2)}'
print(prob_thick)

# for empirical cumulative density function for Reservoir Area
ecdf_thick = ECDF(thick_plot)
plt.step(ecdf_thick.x, ecdf_thick.y, label='Empirical CDF')
plt.title(f'Cumulative Probability of Reservoir Thickness\n ({n} Trials)')
plt.xlabel('Thickness in feet', fontsize=12, color='red')
plt.ylabel('Cumulative Probability', fontsize=12, color='red')
plt.axhline(y=0.10, c='red', ls=':', lw=0.7)
plt.axhline(y=0.50, c='red', ls=':', lw=0.7)
plt.axhline(y=0.90, c='red', ls=':', lw=0.7)
plt.axvline(x=cp10_thick, c='red', ls=':', lw=0.7)
plt.axvline(x=cp50_thick, c='red', ls=':', lw=0.7)
plt.axvline(x=cp90_thick, c='red', ls=':', lw=0.7)
plt.annotate(f'---> 10%= {round(cp10_thick,2)}', xy=(cp10_thick, 0.10), xytext=(cp10_thick, 0.10))
plt.annotate(f'---> 50%= {round(cp50_thick,2)}', xy=(cp50_thick, 0.50), xytext=(cp50_thick, 0.50))
plt.annotate(f'---> 90%= {round(cp90_thick,2)}', xy=(cp90_thick, 0.90), xytext=(cp90_thick, 0.90))
plt.legend()
plt.show()


                                    # 3. Porosity of the Reservoir

# 3. for calculating statistical parameters of Triangular distribution of porosity
print('\n')
print('Calculated statistical parameters of the Triangular distribution of Porosity')
por_plot = POR
print('Number of Total Trials=', n)
mean_por = np.mean(por_plot)
print('Por_plot_Mean=', mean_por)
print('Por_plot_Median=', np.median(por_plot))
std_por = np.std(por_plot)
print('Por_plot_Standard_Deviation=', std_por)
min_por = np.min(por_plot)
print('Por_plot_Minimum=', min_por)
max_por = np.max(por_plot)
print('Por_plot_Maximum=', max_por)
print('Por_plot_Variance=', np.var(por_plot))
print('Por_plot_Skewness=', skew(por_plot, bias=True))
print('Por_plot_Kurtosis=', kurtosis(por_plot, bias=True))
Mean_Standard_Error_por = (std_por/n**(1/2))
print("Mean_Standard_Error_por=", Mean_Standard_Error_por)
print('\n')

# for creating norm fitting line and visualization histogram and norm fit curve
#domain_por = np.linspace(min_por, max_por)
#plt.plot(domain_por, norm.pdf(domain_por, mean_por, std_por))

plt.hist(por_plot, bins=100, density=True, linewidth=1, edgecolor="blue", facecolor='r', alpha=1,
         label=f'$(\mu={round(mean_por,3)},\sigma={round(std_por,3)})$')
plt.xlabel('Reservoir porosity', fontsize=12, color='red')
plt.ylabel('Probability', fontsize=12, color='red')
plt.title("Triangular distribution for reservoir porosity")
plt.axis([0.22, 0.3, 0, 40])
plt.grid(True)
plt.legend()
plt.show()

# for probabilities calculation
cp10_por = norm.ppf(0.10, loc=mean_por, scale=std_por)
cp50_por = norm.ppf(0.50, loc=mean_por, scale=std_por)
cp90_por = norm.ppf(0.90, loc=mean_por, scale=std_por)
print('Probabilities for Reservoir Porosity')
prob_por = f'10% percentile = {round(cp10_por, 2)} ' \
          f'\n50% percentile(most likely value) = {round(cp50_por, 2)} ' \
            f'\n90% percentile) = {round(cp90_por, 2)}'
print(prob_por)

# for empirical cumulative density function for Reservoir Porosity
ecdf_por = ECDF(por_plot)
plt.step(ecdf_por.x, ecdf_por.y, label='Empirical CDF')
plt.title(f'Cumulative Probability of Reservoir Porosity\n ({n} Trials)')
plt.xlabel('Porosity', fontsize=12, color='red')
plt.ylabel('Cumulative Probability', fontsize=12, color='red')
plt.axhline(y=0.10, c='red', ls=':', lw=0.7)
plt.axhline(y=0.50, c='red', ls=':', lw=0.7)
plt.axhline(y=0.90, c='red', ls=':', lw=0.7)
plt.axvline(x=cp10_por, c='red', ls=':', lw=0.7)
plt.axvline(x=cp50_por, c='red', ls=':', lw=0.7)
plt.axvline(x=cp90_por, c='red', ls=':', lw=0.7)
plt.annotate(f'---> 10%= {round(cp10_por,2)}', xy=(cp10_por, 0.10), xytext=(cp10_por, 0.10))
plt.annotate(f'---> 50%= {round(cp50_por,2)}', xy=(cp50_por, 0.50), xytext=(cp50_por, 0.50))
plt.annotate(f'---> 90%= {round(cp90_por,2)}', xy=(cp90_por, 0.90), xytext=(cp90_por, 0.90))
plt.legend()
plt.show()


                                    # 4. Reservoir gas saturation

# 4. for calculating statistical parameters of normal distribution of the reservoir gas saturation
print('\n')
print('Calculated statistical parameters of triangular distribution of the reservoir gas saturation')
gs_plot = GS
print('Number of Total Trials=', n)
mean_gs = np.mean(gs_plot)
print('Gs_plot_Mean=', mean_gs)
print('Gs_plot_Median=', np.median(gs_plot))
std_gs = np.std(gs_plot)
print('Gs_plot_Standard_Deviation=', std_gs)
min_gs = np.min(gs_plot)
print('Gs_plot_Minimum=', min_gs)
max_gs = np.max(gs_plot)
print('Gs_plot_Maximum=', max_gs)
print('Gs_plot_Variance=', np.var(gs_plot))
print('Gs_plot_Skewness=', skew(gs_plot, bias=True))
print('Gs_plot_Kurtosis=', kurtosis(gs_plot, bias=True))
Mean_Standard_Error_gs = (std_gs/n**(1/2))
print("Mean_Standard_Error_Gs=", Mean_Standard_Error_gs)
print('\n')

# for creating norm fitting line and visualization histogram and norm fit curve
#domain_gs = np.linspace(min_gs, max_gs)
#plt.plot(domain_gs, norm.pdf(domain_gs, mean_gs, std_gs))

plt.hist(gs_plot, bins=100, density=True, linewidth=1, edgecolor="blue", facecolor='r', alpha=1,
         label=f'$(\mu={round(mean_gs,3)},\sigma={round(std_gs,3)})$')
plt.xlabel('Reservoir gas saturation', fontsize=12, color='red')
plt.ylabel('Probability', fontsize=12, color='red')
plt.title("Triangular distribution for reservoir gas saturation")
plt.axis([0.40, 0.65, 0, 15])
plt.grid(True)
plt.legend()
plt.show()


# for probabilities calculation
cp10_gs = norm.ppf(0.10, loc=mean_gs, scale=std_gs)
cp50_gs = norm.ppf(0.50, loc=mean_gs, scale=std_gs)
cp90_gs = norm.ppf(0.90, loc=mean_gs, scale=std_gs)
print('Probabilities for Reservoir Porosity')
prob_gs = f'10% percentile = {round(cp10_gs, 2)} ' \
          f'\n50% percentile(most likely value) = {round(cp50_gs, 2)} ' \
            f'\n90% percentile) = {round(cp90_gs, 2)}'
print(prob_gs)


# for empirical cumulative density function for Reservoir Porosity
ecdf_gs = ECDF(gs_plot)
plt.step(ecdf_gs.x, ecdf_gs.y, label='Empirical CDF')
plt.title(f'Cumulative Probabilities of Reservoir Gas Saturation\n ({n} Trials)')
plt.xlabel('Porosity (fraction)', fontsize=12, color='red')
plt.ylabel('Cumulative Probability', fontsize=12, color='red')
plt.axhline(y=0.10, c='red', ls=':', lw=0.7)
plt.axhline(y=0.50, c='red', ls=':', lw=0.7)
plt.axhline(y=0.90, c='red', ls=':', lw=0.7)
plt.axvline(x=cp10_gs, c='red', ls=':', lw=0.7)
plt.axvline(x=cp50_gs, c='red', ls=':', lw=0.7)
plt.axvline(x=cp90_gs, c='red', ls=':', lw=0.7)
plt.annotate(f'--> 10%= {round(cp10_gs,2)}', xy=(cp10_gs, 0.10), xytext=(cp10_gs, 0.10))
plt.annotate(f'--> 50%= {round(cp50_gs,2)}', xy=(cp50_gs, 0.50), xytext=(cp50_gs, 0.50))
plt.annotate(f'--> 90%= {round(cp90_gs,2)}', xy=(cp90_gs, 0.90), xytext=(cp90_gs, 0.90))
plt.legend()
plt.show()


                                    # 5. Gas formation volume factor rcf/scf

# 4. for calculating statistical parameters of normal distribution of Gas formation volume factor rcf/scf
print('\n')
print('Calculated statistical parameters of normal distribution of Gas formation volume factor rcf/scf')
bg_plot = BG
print('Number of Total Trials=', n)
mean_bg = np.mean(bg_plot)
print('Bg_plot_Mean=', mean_bg)
print('Bg_plot_Median=', np.median(bg_plot))
std_bg = np.std(bg_plot)
print('Bg_plot_Standard_Deviation=', std_bg)
min_bg = np.min(bg_plot)
print('Bg_plot_Minimum=', min_bg)
max_bg = np.max(bg_plot)
print('Bg_plot_Maximum=', max_bg)
print('Bg_plot_Variance=', np.var(bg_plot))
print('Bg_plot_Skewness=', skew(bg_plot, bias=True))
print('Bg_plot_Kurtosis=', kurtosis(bg_plot, bias=True))
Mean_Standard_Error_bg = (std_bg/n**(1/2))
print("Mean_Standard_Error_bg=", Mean_Standard_Error_bg)
print('\n')

# for creating norm fitting line and visualization histogram and norm fit curve
#domain_bg = np.linspace(min_bg, max_bg)
#plt.plot(domain_bg, norm.pdf(domain_bg, mean_bg, std_bg))

plt.hist(bg_plot, bins=100, density=True, linewidth=1, edgecolor="blue", facecolor='r', alpha=1,
         label=f'$(\mu={round(mean_bg,3)},\sigma={round(std_bg,3)})$')
plt.xlabel('Gas formation volume factor', fontsize=12, color='red')
plt.ylabel('Probability', fontsize=12, color='red')
plt.title("Normal distribution for gas formation volume factor")
plt.axis([0.00475, 0.00495, 0, 25000])
plt.xticks(fontsize=8)
plt.yticks(fontsize=8)
plt.grid(True)
plt.legend()
plt.show()

# for probabilities calculation
cp10_bg = norm.ppf(0.10, loc=mean_bg, scale=std_bg)
cp50_bg = norm.ppf(0.50, loc=mean_bg, scale=std_bg)
cp90_bg = norm.ppf(0.90, loc=mean_bg, scale=std_bg)
print('Probabilities for Formation Volume Factor')
prob_bg = f'10% percentile = {round(cp10_bg, 5)} ' \
          f'\n50% percentile(most likely value) = {round(cp50_bg, 5)} ' \
            f'\n90% percentile) = {round(cp90_bg, 5)}'
print(prob_bg)

# for empirical cumulative density function for Reservoir Porosity
ecdf_bg = ECDF(bg_plot)
plt.step(ecdf_bg.x, ecdf_bg.y, label='Empirical CDF')
plt.title(f'Cumulative Probabilities of Formation Volume Factor\n ({n} Trials)')
plt.xlabel('Formation Volume Factor,Bg', fontsize=12, color='red')
plt.ylabel('Cumulative Probability', fontsize=12, color='red')
plt.axhline(y=0.10, c='red', ls=':', lw=0.7)
plt.axhline(y=0.50, c='red', ls=':', lw=0.7)
plt.axhline(y=0.90, c='red', ls=':', lw=0.7)
plt.axvline(x=cp10_bg, c='red', ls=':', lw=0.7)
plt.axvline(x=cp50_bg, c='red', ls=':', lw=0.7)
plt.axvline(x=cp90_bg, c='red', ls=':', lw=0.7)
plt.annotate(f'--> 10%= {round(cp10_bg,5)}', xy=(cp10_bg, 0.10), xytext=(cp10_bg, 0.10))
plt.annotate(f'--> 50%= {round(cp50_bg,5)}', xy=(cp50_bg, 0.50), xytext=(cp50_bg, 0.50))
plt.annotate(f'--> 90%= {round(cp90_bg,5)}', xy=(cp90_bg, 0.90), xytext=(cp90_bg, 0.90))
plt.legend()
plt.show()


                                    # 6. Final GIIP calculation

# 4. for calculating statistical parameters of normal distribution of GIIP
print('\n')
print('Calculated statistical parameters of normal distribution of GIIP')
giip_plot = Results
print('Number of Total Trials=', n)
mean_giip = np.mean(giip_plot)
print('GIIP_plot_Mean=', mean_giip)
mode_giip = mode(giip_plot, keepdims=False)
print('GIIP_plot_Mode=', mode_giip)
print('GIIP_plot_Median=', np.median(giip_plot))
std_giip = np.std(giip_plot)
print('GIIP_plot_Standard_Deviation=', std_giip)
min_giip = np.min(giip_plot)
print('GIIP_plot_Minimum=', min_giip)
max_giip = np.max(giip_plot)
print('GIIP_plot_Maximum=', max_giip)
print('GIIP_plot_Variance=', np.var(giip_plot))
print('GIIP_plot_Skewness=', skew(giip_plot, bias=True))
print('GIIP_plot_Kurtosis=', kurtosis(giip_plot, bias=True))
Mean_Standard_Error_giip = (std_giip/n**(1/2))
print("Mean_Standard_Error_GIIP=", Mean_Standard_Error_giip)
print('\n')

# for creating norm fitting line and visualization histogram and norm fit curve
#domain_giip = np.linspace(min_giip, max_giip)
#plt.plot(domain_giip, norm.pdf(domain_giip, mean_giip, std_giip))

plt.hist(giip_plot, bins=100, density=True, linewidth=1, edgecolor="blue", facecolor='r', alpha=1,
         label=f'$(\mu={round(mean_giip,3)},\sigma={round(std_giip,3)})$')
plt.xlabel('Gas Initial in Place', fontsize=12, color='red')
plt.ylabel('Probability', fontsize=12, color='red')
plt.title("Normal distribution for GIIP calculation")
plt.axis([0, 300, 0, 0.015])
plt.grid(True)
plt.legend()
plt.show()

# For quality checking of simulation whether it will be needed more iterations or not
plt.plot(giip_plot, color="green", linewidth=1, label="GIIP")
plt.title(f'Monte Carlo Simulation for GIIP\n ({n} Iterations)')
plt.xlabel('Number of Iterations', fontsize=12, color='red')
plt.ylabel('GIIP in BCF', fontsize=12, color='red')
plt.axis([0, n, 0, 400])
plt.legend()
plt.show()

# for probabilities calculation
cp001_giip = norm.ppf(0.001, loc=mean_giip, scale=std_giip)
cp10_giip = norm.ppf(0.10, loc=mean_giip, scale=std_giip)
cp50_giip = norm.ppf(0.50, loc=mean_giip, scale=std_giip)
cp90_giip = norm.ppf(0.90, loc=mean_giip, scale=std_giip)
print('Probabilities for Gas Initial in Place')
prob_giip = f'GIIP_P90-1P(proved) = {round(cp10_giip, 2)} BCF, ' \
          f'\nGIIP_P50-2P(proved+probable) = {round(cp50_giip, 2)} BCF, ' \
            f'\nGIIP_P10-3P(proved+probable+possible) = {round(cp90_giip, 2)} BCF'
print(prob_giip)

# for empirical cumulative density function for GIIP
ecdf_giip = ECDF(giip_plot)
plt.step(ecdf_giip.x, ecdf_giip.y, label='Empirical CDF')
plt.title(f'Cumulative Probability of Monte Carlo Simulation for GIIP\n ({n} Iterations)')
plt.xlabel('GIIP in BCF', fontsize=12, color='red')
plt.ylabel('Cumulative Probability', fontsize=12, color='red')
plt.axhline(y=0.10, c='red', ls=':', lw=0.7)
plt.axhline(y=0.50, c='red', ls=':', lw=0.7)
plt.axhline(y=0.90, c='red', ls=':', lw=0.7)
plt.axvline(x=cp10_giip, c='red', ls=':', lw=0.7)
plt.axvline(x=cp50_giip, c='red', ls=':', lw=0.7)
plt.axvline(x=cp90_giip, c='red', ls=':', lw=0.7)
plt.annotate(f'---> P90(1P)= {round(cp10_giip,2)}', xy=(cp10_giip, 0.10), xytext=(cp10_giip, 0.10))
plt.annotate(f'---> P50(2P)= {round(cp50_giip,2)}', xy=(cp50_giip, 0.50), xytext=(cp50_giip, 0.50))
plt.annotate(f'---> P10(3P)= {round(cp90_giip,2)}', xy=(cp90_giip, 0.90), xytext=(cp90_giip, 0.90))
plt.text(cp001_giip, 0.85, "1P= Proved\n2P= Proved+Probable\n3P=Proved+Probable+Possible", fontsize=9)
plt.legend()
plt.show()
print("\n")
